"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serviceAgentEmail = exports.getGitRepositoryLink = exports.createGitRepositoryLink = exports.fetchLinkableGitRepositories = exports.listConnections = exports.getConnection = exports.createConnection = exports.client = void 0;
const apiv2_1 = require("../apiv2");
const api_1 = require("../api");
const PAGE_SIZE_MAX = 100;
exports.client = new apiv2_1.Client({
    urlPrefix: api_1.developerConnectOrigin,
    auth: true,
    apiVersion: "v1",
});
async function createConnection(projectId, location, connectionId, githubConfig) {
    const config = Object.assign(Object.assign({}, githubConfig), { githubApp: "FIREBASE" });
    const res = await exports.client.post(`projects/${projectId}/locations/${location}/connections`, {
        githubConfig: config,
    }, { queryParams: { connectionId } });
    return res.body;
}
exports.createConnection = createConnection;
async function getConnection(projectId, location, connectionId) {
    const name = `projects/${projectId}/locations/${location}/connections/${connectionId}`;
    const res = await exports.client.get(name);
    return res.body;
}
exports.getConnection = getConnection;
async function listConnections(projectId, location) {
    const conns = [];
    const getNextPage = async (pageToken = "") => {
        const res = await exports.client.get(`/projects/${projectId}/locations/${location}/connections`, {
            queryParams: {
                pageSize: PAGE_SIZE_MAX,
                pageToken,
            },
        });
        if (Array.isArray(res.body.connections)) {
            conns.push(...res.body.connections);
        }
        if (res.body.nextPageToken) {
            await getNextPage(res.body.nextPageToken);
        }
    };
    await getNextPage();
    return conns;
}
exports.listConnections = listConnections;
async function fetchLinkableGitRepositories(projectId, location, connectionId, pageToken = "", pageSize = 1000) {
    const name = `projects/${projectId}/locations/${location}/connections/${connectionId}:fetchLinkableRepositories`;
    const res = await exports.client.get(name, {
        queryParams: {
            pageSize,
            pageToken,
        },
    });
    return res.body;
}
exports.fetchLinkableGitRepositories = fetchLinkableGitRepositories;
async function createGitRepositoryLink(projectId, location, connectionId, gitRepositoryLinkId, cloneUri) {
    const res = await exports.client.post(`projects/${projectId}/locations/${location}/connections/${connectionId}/gitRepositoryLinks`, { cloneUri }, { queryParams: { gitRepositoryLinkId } });
    return res.body;
}
exports.createGitRepositoryLink = createGitRepositoryLink;
async function getGitRepositoryLink(projectId, location, connectionId, gitRepositoryLinkId) {
    const name = `projects/${projectId}/locations/${location}/connections/${connectionId}/gitRepositoryLinks/${gitRepositoryLinkId}`;
    const res = await exports.client.get(name);
    return res.body;
}
exports.getGitRepositoryLink = getGitRepositoryLink;
function serviceAgentEmail(projectNumber) {
    return `service-${projectNumber}@${api_1.developerConnectP4SAOrigin}`;
}
exports.serviceAgentEmail = serviceAgentEmail;
